using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace pdks
{
    public partial class frmAttLog : Form
    {
        public frmAttLog()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {

                if (!Devices.Connected)
                {
                    Devices.Connect();
                }
                if (Devices.Connected)
                {
                    string sdwEnrollNumber = "";

                    int idwVerifyMode = 0;
                    int idwInOutMode = 0;
                    int idwYear = 0;
                    int idwMonth = 0;
                    int idwDay = 0;
                    int idwHour = 0;
                    int idwMinute = 0;
                    int idwSecond = 0;
                    int idwWorkcode = 0;

                    int idwErrorCode = 0;
                    int iGLCount = 0;
                    int iIndex = 0;

                    Cursor = Cursors.WaitCursor;
                    lvLogs.Items.Clear();
                    Devices.MC.EnableDevice(Devices.MachineNumber, false);
                    if (Devices.MC.ReadGeneralLogData(Devices.MachineNumber))
                    {
                        while (Devices.MC.SSR_GetGeneralLogData(Devices.MachineNumber, out sdwEnrollNumber, out idwVerifyMode,
                                   out idwInOutMode, out idwYear, out idwMonth, out idwDay, out idwHour, out idwMinute, out idwSecond, ref idwWorkcode))
                        {
                            iGLCount++;
                            lvLogs.Items.Add(iGLCount.ToString());
                            lvLogs.Items[iIndex].SubItems.Add(sdwEnrollNumber);
                            lvLogs.Items[iIndex].SubItems.Add(idwVerifyMode.ToString());
                            lvLogs.Items[iIndex].SubItems.Add(idwInOutMode.ToString());
                            lvLogs.Items[iIndex].SubItems.Add(idwYear.ToString() + "-" + idwMonth.ToString() + "-" + idwDay.ToString() + " " + idwHour.ToString() + ":" + idwMinute.ToString() + ":" + idwSecond.ToString());
                            lvLogs.Items[iIndex].SubItems.Add(idwWorkcode.ToString());
                            iIndex++;
                            if (Program.data.InsertLog(Convert.ToInt32(sdwEnrollNumber), idwVerifyMode, idwInOutMode, idwYear, idwMonth, idwDay, idwHour, idwMinute, idwSecond, idwWorkcode) != 1)
                            {
                                MessageBox.Show("Database Yazma İşlemi Sırasında Hata Oluştu");
                                return;
                            }
                        }
                        /*
                        DialogResult cikis = new DialogResult();
                        cikis = MessageBox.Show("Log kayıtları silinsin mi? Devam etmek istiyormusunuz ?", "Uyarı", MessageBoxButtons.YesNo);
                        if (cikis == DialogResult.Yes)
                        {
                            button2_Click(sender, e);
                        }
                        if (cikis == DialogResult.No)
                        {
                            this.Close(); 
                        }
                        */
                        button2_Click(sender, e);
                    }
                    else
                    {
                        Cursor = Cursors.Default;
                        Devices.MC.GetLastError(ref idwErrorCode);

                        if (idwErrorCode != 0)
                        {
                            MessageBox.Show("Terminalden Kayıtlar Okunamadı,Hata Kodu: " + idwErrorCode.ToString(), "Error");
                        }
                        else
                        {
                            MessageBox.Show("Terminalde Kayıt Yok", "Hata");
                        }
                    }
                    Devices.MC.EnableDevice(Devices.MachineNumber, true);
                    Devices.MC.Disconnect();
                    Cursor = Cursors.Default;
                }
                else
                {
                    MessageBox.Show("Parmakizi Cihazına Bağlanalamadı.");
                }
            }
            catch {
                MessageBox.Show("Bilgileri alırken hata ile karşılaşıldı.");
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Devices.Connect();
            int idwErrorCode = 0;

            lvLogs.Items.Clear();
            Devices.MC.EnableDevice(Devices.MachineNumber, false);
            if (Devices.MC.ClearGLog(Devices.MachineNumber))
            {
                Devices.MC.RefreshData(Devices.MachineNumber);
                MessageBox.Show("Terminaldeki Tüm Bilgiler Silindi", "Doğrulama");
            }
            else
            {
                Devices.MC.GetLastError(ref idwErrorCode);
                MessageBox.Show("İşlem Sırasında Hata Oluştu ,ErrorCode=" + idwErrorCode.ToString(), "Error");
            }
            Devices.MC.EnableDevice(Devices.MachineNumber, true);
        }

        private void button3_Click(object sender, EventArgs e)
        {
            Devices.MC.Disconnect();
        }

        private void lvLogs_SelectedIndexChanged(object sender, EventArgs e)
        {

        }
    }
}
